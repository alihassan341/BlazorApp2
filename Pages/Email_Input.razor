
<div class="w-100 px-3 pb-1" style="width: @inputWidth">
    @foreach (var field in fields)
    {

        <div class="@field.FieldClass, resizable-input" @onclick="(() => onAction(field.Id))">
            <label for="@field.Id">@field.Name :</label>
            <input type="text" class="form-control form-control-sm" id="@field.Id" @bind="field.Value" />
            @if (field.Actions)
        {
            <div class="d-flex align-items-ceneter justify-content-end pt-2">
                    @* @onclick="HandleButtonClick" *@
                    <button type="button" class="btn btn-outline-light btn-sm">
                    <i class="fa-solid fa-grip"></i>
                </button>
                <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="DuplicateField">
                    <i class="fa-solid fa-copy"></i>
                </button>
                    <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                    <i class="fa-solid fa-square-minus"></i>
                </button>
            </div>            
        }
        </div>
    }
    </div>
@*     kindly apply working for all inputs componemts like cellphone url *@
    <style>
        .selected{
            border: 2px solid lightblue !important;
            border-style: dashed !important;
        }
         .resizable-input {
        resize: horizontal;
        overflow: hidden;
        border: 2px solid lightblue !important;
        border-style: dashed !important;
        padding: 5px;
        min-width: 130px;
        max-width: 800px;
    }
</style>

@code {

    // private ElementReference divRef;

    // private int divWidth = 100;

    [Inject]
    public IJSRuntime? JSRuntime { get; set; }

    private List<FieldModel> fields = new List<FieldModel>
    {
        new FieldModel { Id = 1, Name = "Email", Value = "moin@gmail.com", FieldClass = "p-2 form-group mb-2", Actions = false },
    };

    private void onAction(int currentId)
    {
        var currentObj = fields.FirstOrDefault(o => o.Id == currentId);
        if (!currentObj.FieldClass.Contains("selected"))
        {
            currentObj.FieldClass = "selected p-2 form-group mb-2";
            currentObj.Actions = true;
        }
        else
        {
            currentObj.FieldClass = "p-2 form-group mb-2";
            currentObj.Actions = false;
        }
    }

    private void EnableDragDrop()
    {
        JSRuntime?.InvokeVoidAsync("handleDrop", new object[] { });
    }

    private void DuplicateField()
    {
        var IdsCount = fields.Count();
        var nextId = IdsCount + 1;
        fields.Add(new FieldModel { Id = nextId, Name = "Email", Value = "moin@gmail.com", FieldClass = "p-2 form-group mb-2", Actions = false });
    }

    private void OnRemove(int? RecordId)
    {
        var rowId = fields.FirstOrDefault(x => x.Id == RecordId);
        if(rowId != null)
        {
            fields.Remove(rowId);
        }
    }

    // private async void HandleButtonClick()
    // {
    //     divWidth += 50;
    //     await ResizeElement();
    // }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await JSRuntime.InvokeVoidAsync("resizeInputWidth", divRef.Id, divWidth);
    //     }
    // }

    // private async Task ResizeElement()
    // {
    //     await JSRuntime.InvokeVoidAsync("resizeInputWidth", divRef.Id, divWidth);
    // }

    public class FieldModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Value { get; set; } = "";
        public string FieldClass { get; set; } = "";
        public bool Actions { get; set; }
    }

    private string inputWidth = "200px";

    private void UpdateWidth(MouseEventArgs e)
    {
        inputWidth = $"{e.ClientX}px";
    }
}
