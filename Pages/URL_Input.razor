
@using static Email_Input

<div class="w-100 px-3 pb-1" style="width: @inputWidth">
    @foreach (var field in fields)
    {

        <div class="@divClass, resizable-input" @onclick="onAction">
            <label for="@field.Id">@field.Name :</label>
            <input type="text" class="form-control form-control-sm" id="@field.Id" @bind="field.Value" />
            @if (showActions)
            {
                <div class="d-flex align-items-ceneter justify-content-end pt-2">
                    @* @onclick="HandleButtonClick" *@
                    <button type="button" class="btn btn-outline-light btn-sm">
                        <i class="fa-solid fa-grip"></i>
                    </button>
                    <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="DuplicateField">
                        <i class="fa-solid fa-copy"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                        <i class="fa-solid fa-square-minus"></i>
                    </button>
                </div>
            }
        </div>
    }
</div>
<style>
    .selected {
        border: 2px solid lightblue !important;
        border-style: dashed !important;
    }

    .resizable-input {
        resize: horizontal;
        overflow: hidden;
        border: 2px solid lightblue !important;
        border-style: dashed !important;
        padding: 5px;
        min-width: 130px;
        max-width: 800px;
</style>

@code {
    private string divClass = "p-2";
    private bool showActions = false;

    private void onAction()
    {
        if (!divClass.Contains("selected"))
        {
            divClass = "selected p-2";
            showActions = true;
        }
        else
        {
            divClass = "p-2";
            showActions = false;
        }
    }
    [Inject]
    public IJSRuntime? JSRuntime { get; set; }

    private List<FieldModel> fields = new List<FieldModel>
    {
        new FieldModel { Id = 1, Name = "URL", Value = "URL" },
    };
    private int nextId = 1;

    private void DuplicateField()
    {
        fields.Add(new FieldModel { Id = nextId++, Name = "URL", Value = "URL" });
    }

    private void OnRemove(int? RecordId)
    {
        var rowId = fields.FirstOrDefault(x => x.Id == RecordId);
        if (rowId != null)
        {
            fields.Remove(rowId);
        }
    }
    private string inputWidth = "200px";

    private void UpdateWidth(MouseEventArgs e)
    {
        inputWidth = $"{e.ClientX}px";
    }
}
